import javax.swing.*; 
import java.security.SecureRandom; 
import javax.crypto.Cipher; 
import javax.crypto.KeyGenerator; 
import javax.crypto.SecretKey; 
import javax.crypto.spec.SecretKeySpec; 
import java.util.Random; 

class Main { 
    private static byte[] raw; 
    private String inputMessage, encryptedData, decryptedMessage; 

    public Main() { 
        try { 
            generateSymmetricKey(); 
            inputMessage = JOptionPane.showInputDialog(null, "Enter message to encrypt"); 

            if (inputMessage == null || inputMessage.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No message entered. Exiting.");
                return; // Exit if no input is given
            }

            byte[] ibyte = inputMessage.getBytes(); 
            byte[] ebyte = encrypt(raw, ibyte); 
            encryptedData = bytesToHex(ebyte); // Convert to hex for better readability
            System.out.println("Encrypted message: " + encryptedData); 
            JOptionPane.showMessageDialog(null, "Encrypted Data\n" + encryptedData); 

            byte[] dbyte = decrypt(raw, ebyte); 
            decryptedMessage = new String(dbyte); 
            System.out.println("Decrypted message: " + decryptedMessage); 
            JOptionPane.showMessageDialog(null, "Decrypted Data\n" + decryptedMessage); 
        } catch(Exception e) { 
            e.printStackTrace(); // Print the stack trace for debugging
        } 
    } 

    private void generateSymmetricKey() { 
        try {
            Random r = new Random(); 
            int num = r.nextInt(10000); 
            String knum = String.valueOf(num); 
            byte[] knumb = knum.getBytes(); 
            raw = getRawKey(knumb); // Store the raw key directly
            System.out.println("DES Symmetric key = " + bytesToHex(raw)); // Display the key in hex
        } catch(Exception e) { 
            System.out.println(e); 
        } 
    } 

    private static byte[] getRawKey(byte[] seed) throws Exception { 
        KeyGenerator kgen = KeyGenerator.getInstance("DES"); 
        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG"); 
        sr.setSeed(seed); 
        kgen.init(56, sr); 
        SecretKey skey = kgen.generateKey(); 
        return skey.getEncoded(); 
    } 

    private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception { 
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "DES"); 
        Cipher cipher = Cipher.getInstance("DES"); 
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec); 
        return cipher.doFinal(clear); 
    } 

    private static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception { 
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "DES"); 
        Cipher cipher = Cipher.getInstance("DES"); 
        cipher.init(Cipher.DECRYPT_MODE, skeySpec); 
        return cipher.doFinal(encrypted); 
    } 

    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02X", b));
        }
        return sb.toString();
    }

    public static void main(String[] args) { 
        new Main(); 
    } 
}
